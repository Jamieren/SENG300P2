package com.thelocalmarketplace.software.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.math.BigDecimal;
import java.util.Currency;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.jjjwelectronics.Mass;
import com.jjjwelectronics.Numeral;
import com.jjjwelectronics.scanner.Barcode;
import com.jjjwelectronics.scanner.BarcodedItem;
import com.tdc.CashOverloadException;
import com.tdc.DisabledException;
import com.tdc.banknote.Banknote;
import com.tdc.coin.Coin;
import com.thelocalmarketplace.hardware.BarcodedProduct;
import com.thelocalmarketplace.hardware.SelfCheckoutStationBronze;
import com.thelocalmarketplace.software.PayViaBanknote;
import com.thelocalmarketplace.software.SelfCheckoutStationSoftware;
import com.thelocalmarketplace.software.Session;
import com.thelocalmarketplace.software.TheLocalMarketPlaceDatabase;

import powerutility.PowerGrid;

// Test class for paying with banknote

public class TestPayViaBanknote {
	Numeral[] testNumeralArray1 = {Numeral.one} ;
	Barcode testBarcode1 = new Barcode(testNumeralArray1);
	BarcodedItem testItem1 = new BarcodedItem(testBarcode1, Mass.ONE_GRAM);
	BarcodedProduct testProduct1 = new BarcodedProduct(testBarcode1, "1 ml of Water", 1, 1);

	Numeral[] testNumeralArray2 = {Numeral.two} ;
	Barcode testBarcode2 = new Barcode(testNumeralArray2);
	BarcodedItem testItem2 = new BarcodedItem(testBarcode2, Mass.ONE_GRAM.sum(Mass.ONE_GRAM));
	BarcodedProduct testProduct2 = new BarcodedProduct(testBarcode2, "1 ml of Milk", 2, 2);
	
	SelfCheckoutStationSoftware software;
	TheLocalMarketPlaceDatabase softwareDatabase;
	Session session;
	
	Banknote five, ten, twenty;
	
	
	@Before
	public void setup() {
		software = new SelfCheckoutStationSoftware();
		SelfCheckoutStationBronze.configureCurrency(Currency.getInstance("CAD"));
		SelfCheckoutStationBronze.configureBanknoteDenominations(new BigDecimal[] {new BigDecimal("5.00"),new BigDecimal("10.00"), new BigDecimal("20.00")});
		SelfCheckoutStationBronze.configureBanknoteStorageUnitCapacity(10);
		SelfCheckoutStationBronze.configureCurrency(Currency.getInstance("CAD"));
		SelfCheckoutStationBronze.configureBanknoteStorageUnitCapacity(10);
		
		software.getDatabase();
		software.initSelfStationBronze();
		software.initSession();
		
		software.getDatabase().addBarcodedProductToDatabase(testProduct1);
		software.getDatabase().addBarcodedProductToDatabase(testProduct2);
		
		session = Session.getInstance();
		
		five = new Banknote(Currency.getInstance("CAD"), new BigDecimal("5.00"));
		ten = new Banknote(Currency.getInstance("CAD"), new BigDecimal("10.00"));
		twenty = new Banknote(Currency.getInstance("CAD"), new BigDecimal("20.00"));
		
		
	}


	@Test
    public void exactBanknoteInput() {
        session.addAmountDue(20.00);

        
        PayViaBanknote payViaBanknote = new PayViaBanknote(software.getSelfStationBronze(), session);

        
        payViaBanknote.payViaBanknote(ten);

        double expected = 10.00; 
        double actual = session.getAmountDue();
        double smallValue = 0.0001;
        assertEquals(expected, actual, smallValue);
    }
	

	@Test
	public void banknoteWithChange() {
	    session.addAmountDue(15.00);

	    
	    PayViaBanknote payViaBanknote = new PayViaBanknote(software.getSelfStationBronze(), session);

	   
	    BigDecimal actualChange = payViaBanknote.payViaBanknote(twenty);

	    double expectedRemainingAmount = 5.00; 
	    double expectedChange = 5.00; 
	    double actualRemainingAmount = session.getAmountDue();

	    double smallValue = 0.0001;
	    assertEquals(expectedRemainingAmount, actualRemainingAmount, smallValue);
	    assertEquals(expectedChange, actualChange.doubleValue(), smallValue);
	}
	
	@Test
	public void insufficientPayment() {
	    session.addAmountDue(25.00);

	    PayViaBanknote payViaBanknote = new PayViaBanknote(software.getSelfStationBronze(), session);

	    
	    BigDecimal actualChange = payViaBanknote.payViaBanknote(ten);

	    double expectedRemainingAmount = 15.00;
	    double expectedChange = 0.00; 

	    double actualRemainingAmount = session.getAmountDue();

	    double smallValue = 0.0001;
	    assertEquals(expectedRemainingAmount, actualRemainingAmount, smallValue);
	    assertEquals(expectedChange, actualChange.doubleValue(), smallValue);
	}


}